{"version":3,"sources":["assets/logo.PNG","components/video-box/video-box.component.jsx","pages/home-page/home-page.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","VideoBox","props","state","fetch","method","headers","Accept","then","res","json","data","console","log","catch","err","React","Component","HomePage","style","justifyContent","alignItems","className","backgroundImage","logo","backgroundRepeat","marginTop","App","flex","backgroundColor","padding","paddingBottom","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,2OC+B5BC,E,YA5Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GAFI,E,iFAMjBC,MADY,gCACD,CACTC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,sBAGjBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,MAEbG,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,Q,+BAG5B,OACE,6BACE,sC,GAvBeC,IAAMC,WC2DdC,EAxDE,kBACf,yBAAKC,MAAO,CAAEC,eAAgB,SAAUC,WAAY,WAClD,yBAAKC,UAAU,wBACb,yBACEA,UAAU,aACVH,MAAO,CACLI,gBAAgB,qBAAD,OACXC,IADW,iBAGfC,iBAAkB,gBA2BxB,6BAIG,IAUD,kBAAC,EAAD,OAGF,uBAAGN,MAAO,CAAEO,UAAW,KAAvB,8B,MC1CWC,MAZf,WACE,OACE,yBAAKL,UAAU,MAAMH,MAAO,CAAES,KAAM,EAAGC,gBAAiB,UACtD,yBAAKP,UAAU,kBAAkBH,MAAO,CAAEW,QAAS,KACjD,kBAAC,EAAD,OAGF,yBAAKX,MAAO,CAAEY,cAAe,SCCfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.0eb91279.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4f80996a.PNG\";","import React from \"react\";\r\n\r\nclass VideoBox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  componentDidMount() {\r\n    const url = \"http://www.localhost:8080/all\";\r\n    fetch(url, {\r\n      method: \"get\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        console.log(data);\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>hi</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VideoBox;\r\n","import React from \"react\";\r\nimport logo from \"../../assets/logo.PNG\";\r\nimport \"./home-page.styles.scss\";\r\nimport VideoBox from \"../../components/video-box/video-box.component\";\r\n\r\nconst HomePage = () => (\r\n  <div style={{ justifyContent: \"center\", alignItems: \"center\" }}>\r\n    <div className=\"logo mr-auto ml-auto\">\r\n      <div\r\n        className=\"logo-image\"\r\n        style={{\r\n          backgroundImage: `url(\r\n            ${logo}\r\n          )`,\r\n          backgroundRepeat: \"no-repeat\"\r\n        }}\r\n      />\r\n    </div>\r\n\r\n    {/* <div\r\n      className=\"row\"\r\n      style={{ justifyContent: \"center\", alignItems: \"center\" }}\r\n    > */}\r\n    {/* <iframe\r\n        src=\"https://open.spotify.com/embed/track/1fcJd3YvKhhpo13mUpcUwP\"\r\n        width=\"300\"\r\n        height=\"380\"\r\n        frameborder=\"0\"\r\n        allowtransparency=\"true\"\r\n        allow=\"encrypted-media\"\r\n      ></iframe>\r\n      <iframe\r\n        src=\"https://open.spotify.com/embed/track/7y8qzwuKCN43ntWCCFEEGy\"\r\n        width=\"300\"\r\n        height=\"380\"\r\n        frameborder=\"0\"\r\n        allowtransparency=\"true\"\r\n        allow=\"encrypted-media\"\r\n      ></iframe> */}\r\n    {/* </div>\r\n    <div style={{ padding: 15 }}></div> */}\r\n    <div\r\n    // className=\"row\"\r\n    // style={{ justifyContent: \"center\", alignItems: \"center\" }}\r\n    >\r\n      {\" \"}\r\n      {/* <iframe\r\n        className=\"mr-0 ml-0\"\r\n        width=\"360\"\r\n        height=\"315\"\r\n        src=\"https://www.youtube.com/embed/yXxhHFeprk0\"\r\n        frameborder=\"0\"\r\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n        allowfullscreen\r\n      ></iframe> */}\r\n      <VideoBox />\r\n    </div>\r\n\r\n    <p style={{ marginTop: 10 }}>Full site coming soon...</p>\r\n  </div>\r\n);\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport HomePage from \"./pages/home-page/home-page.component\";\r\nimport \"./App.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={{ flex: 1, backgroundColor: \"white\" }}>\r\n      <div className=\"ml-auto mr-auto\" style={{ padding: 10 }}>\r\n        <HomePage />\r\n      </div>\r\n\r\n      <div style={{ paddingBottom: 300 }}></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}